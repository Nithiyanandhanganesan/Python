Python is Interpreted: Python is processed at runtime by the interpreter. You do not need to compile your program before executing it. 
Python is Interactive: You can actually sit at a Python prompt and interact with the interpreter directly to write your programs.
Python is Object-Oriented: Python supports Object-Oriented style or technique of programming that encapsulates code within objects.

Interactive: $python
Script from the Command-line: 	$python script.py

Identifier:
----------------

A Python identifier is a name used to identify a variable, function, class, module or other object. 
An identifier starts with a letter A to Z or a to z or an underscore (_) followed by zero or more letters, underscores and digits (0 to 9).
Python does not allow punctuation characters such as @, $, and % within identifiers. 
Python is a case sensitive programming language. 

naming conventions for Python identifiers -

Class names start with an uppercase letter. All other identifiers start with a lowercase letter.
Starting an identifier with a single leading underscore indicates that the identifier is private.
Starting an identifier with two leading underscores indicates a strongly private identifier.
If the identifier also ends with two trailing underscores, the identifier is a language-defined special name.

Lines and Indentation:
------------------------

Python provides no braces to indicate blocks of code for class and function definitions or flow control. 
Blocks of code are denoted by line indentation, which is rigidly enforced.
The number of spaces in the indentation is variable, but all statements within the block must be indented the same amount. 

Statements in Python typically end with a new line. Python does, however, allow the use of the line continuation character (\) to denote that the line should continue. For example -

total = item_one + \
        item_two + \
        item_three

Statements contained within the [], {}, or () brackets do not need to use the line continuation character. For example -

days = ['Monday', 'Tuesday', 'Wednesday',
        'Thursday', 'Friday']


Quotes:
--------------

Python accepts single ('), double (") and triple (''' or """) quotes to denote string literals, as long as the same type of quote starts and ends the string.
The triple quotes are used to span the string across multiple lines.


Waiting for the User:
------------------------
raw_input("\n\nPress the enter key to exit.")

Assigning Values to Variables:
--------------------------------
Python variables do not need explicit declaration to reserve memory space. 
The declaration happens automatically when you assign a value to a variable. 
The equal sign (=) is used to assign values to variables.

Multiple Assignment:  
a = b = c = 1
a,b,c, 1,2,"john"


Data types:
-----------------
Python has five standard data types -

Numbers
String
List
Tuple
Dictionary

Delete variables:
---------------------

You can also delete the reference to a number object by using the del statement.
del var
del var_a, var_b

Strings:
----------------
str = 'Hello World!'

print str          # Prints complete string
print str[0]       # Prints first character of the string
print str[2:5]     # Prints characters starting from 3rd to 5th
print str[2:]      # Prints string starting from 3rd character
print str * 2      # Prints string two times
print str + "TEST" # Prints concatenated string

Lists:
--------------
A list contains items separated by commas and enclosed within square brackets ([]). 
To some extent, lists are similar to arrays in C. One difference between them is that all the items belonging to a list can be of different data type.
The values stored in a list can be accessed using the slice operator ([ ] and [:]) with indexes starting at 0 in the beginning of the list 
and working their way to end -1. The plus (+) sign is the list concatenation operator, and the asterisk (*) is the repetition operator.


list = [ 'abcd', 786 , 2.23, 'john', 70.2 ]
tinylist = [123, 'john']

print list          # Prints complete list
print list[0]       # Prints first element of the list
print list[1:3]     # Prints elements starting from 2nd till 3rd 
print list[2:]      # Prints elements starting from 3rd element
print tinylist * 2  # Prints list two times
print list + tinylist # Prints concatenated lists


list1 = ['physics', 'chemistry', 1997, 2000];
del list1[2];
print "After deleting value at index 2 : "

len([1, 2, 3])			3	               		 Length
[1, 2, 3] + [4, 5, 6]		[1, 2, 3, 4, 5, 6]		Concatenation
['Hi!'] * 4			['Hi!', 'Hi!', 'Hi!', 'Hi!']	Repetition
3 in [1, 2, 3]			True				Membership
for x in [1, 2, 3]: print x,	1 2 3				Iteration

Tuples:
------------

A tuple is another sequence data type that is similar to the list. A tuple consists of a number of values separated by commas. 
Unlike lists, however, tuples are enclosed within parentheses.

The main differences between lists and tuples are: Lists are enclosed in brackets ( [ ] ) and their elements and size can be changed, 
while tuples are enclosed in parentheses ( ( ) ) and cannot be updated. 
Tuples can be thought of as read-only lists.

#!/usr/bin/python

tuple = ( 'abcd', 786 , 2.23, 'john', 70.2  )
tinytuple = (123, 'john')

print tuple           # Prints complete list
print tuple[0]        # Prints first element of the list
print tuple[1:3]      # Prints elements starting from 2nd till 3rd 
print tuple[2:]       # Prints elements starting from 3rd element
print tinytuple * 2   # Prints list two times
print tuple + tinytuple # Prints concatenated lists


Dictionary:
------------

Python's dictionaries are kind of hash table type. 
They work like associative arrays or hashes found in Perl and consist of key-value pairs. 
A dictionary key can be almost any Python type, but are usually numbers or strings. 
Values, on the other hand, can be any arbitrary Python object.

Dictionaries are enclosed by curly braces ({ }) and values can be assigned and accessed using square braces ([]). 


#!/usr/bin/python

dict = {}
dict['one'] = "This is one"
dict[2]     = "This is two"

tinydict = {'name': 'john','code':6734, 'dept': 'sales'}

print dict['one']       # Prints value for 'one' key
print dict[2]           # Prints value for 2 key
print tinydict          # Prints complete dictionary
print tinydict.keys()   # Prints all the keys
print tinydict.values() # Prints all the values

dict = {'Name': 'Zara', 'Age': 7, 'Class': 'First'}
print "dict['Name']: ", dict['Name']
print "dict['Age']: ", dict['Age']

dict = {'Name': 'Zara', 'Age': 7, 'Class': 'First'}
dict['Age'] = 8; # update existing entry
dict['School'] = "DPS School"; # Add new entry

dict = {'Name': 'Zara', 'Age': 7, 'Class': 'First'}
del dict['Name']; # remove entry with key 'Name'
dict.clear();     # remove all entries in dict
del dict ;        # delete entire dictionary

(a) More than one entry per key not allowed. Which means no duplicate key is allowed. When duplicate keys encountered during assignment, the last assignment wins.
(b) Keys must be immutable. 

Data Type Conversion:
-----------------------

int(x)
str(x)     Converts object x to a string representation.
repr(x)    Converts object x to an expression string.
eval(str)  Evaluates a string and returns an object.
tuple(s)   Converts s to a tuple.
list(s)    Converts s to a list.
set(s)     Converts s to a set.
dict(d)    Creates a dictionary. d must be a sequence of (key,value) tuples.
frozenset(s) Converts s to a frozen set.
chr(x)     Converts an integer to a character.
unichr(x)  Converts an integer to a Unicode character.
ord(x)     Converts a single character to its integer value.
hex(x)     Converts an integer to a hexadecimal string.
oct(x)     Converts an integer to an octal string.

Python Membership Operators:  in , not in
Python Identity Operators  :  is , is not


LOOPS:
===================

while:
----------

count = 0
while (count < 9):
   print 'The count is:', count
   count = count + 1

print "Good bye!"

Using else Statement with Loops
Python supports to have an else statement associated with a loop statement.
If the else statement is used with a for loop, the else statement is executed when the loop has exhausted iterating the list.
If the else statement is used with a while loop, the else statement is executed when the condition becomes false.

count = 0
while count < 5:
   print count, " is  less than 5"
   count = count + 1
else:
   print count, " is not less than 5"


for:
--------

for iterating_var in sequence:
   statements(s)

for letter in 'Python':     # First Example
   print 'Current Letter :', letter

fruits = ['banana', 'apple',  'mango']
for fruit in fruits:        # Second Example
   print 'Current fruit :', fruit

print "Good bye!"
When the above code is executed, it produces the following result -

Current Letter : P
Current Letter : y
Current Letter : t
Current Letter : h
Current Letter : o
Current Letter : n
Current fruit : banana
Current fruit : apple
Current fruit : mango
Good bye!

loop based on index:
------------------------
fruits = ['banana', 'apple',  'mango']
for index in range(len(fruits)):
   print 'Current fruit :', fruits[index]

if in for :
-------------
for num in range(10,20):  #to iterate between 10 to 20
   for i in range(2,num): #to iterate on the factors of the number
      if num%i == 0:      #to determine the first factor
         j=num/i          #to calculate the second factor
         print '%d equals %d * %d' % (num,i,j)
         break #to move to the next number, the #first FOR
   else:                  # else part of the loop
      print num, 'is a prime number'


FUNCTIONS:
======================

Function blocks begin with the keyword def followed by the function name and parentheses ( ( ) ).
Any input parameters or arguments should be placed within these parentheses. You can also define parameters inside these parentheses.
The first statement of a function can be an optional statement - the documentation string of the function or docstring.
The code block within every function starts with a colon (:) and is indented.
The statement return [expression] exits a function, optionally passing back an expression to the caller. 
A return statement with no arguments is the same as return None.

def functionname( parameters ):
   "function_docstring"
   function_suite
   return [expression]

def printme( str ):
   "This prints a passed string into this function"
   print str
   return

# Now you can call printme function
printme("I'm first call to user defined function!")
printme("Again second call to the same function")

Pass by reference vs value:
-----------------------------

All parameters (arguments) in the Python language are passed by reference. 
It means if you change what a parameter refers to within a function, the change also reflects back in the calling function.

# Function definition is here
def changeme( mylist ):
   "This changes a passed list into this function"
   mylist.append([1,2,3,4]);
   print "Values inside the function: ", mylist
   return

# Now you can call changeme function
mylist = [10,20,30];
changeme( mylist );
print "Values outside the function: ", mylist

Function Arguments:
-----------------------

Required arguments:
Required arguments are the arguments passed to a function in correct positional order. 

Keyword arguments:
Keyword arguments are related to the function calls. When you use keyword arguments in a function call, the caller identifies the arguments by the parameter name.

# Function definition is here
def printinfo( name, age ):
   "This prints a passed info into this function"
   print "Name: ", name
   print "Age ", age
   return;

# Now you can call printinfo function
printinfo( age=50, name="miki" )


Default arguments:
# Function definition is here
def printinfo( name, age = 35 ):
   "This prints a passed info into this function"
   print "Name: ", name
   print "Age ", age
   return;

# Now you can call printinfo function
printinfo( age=50, name="miki" )
printinfo( name="miki" )


Variable-length arguments:
# Function definition is here
def printinfo( arg1, *vartuple ):
   "This prints a variable passed arguments"
   print "Output is: "
   print arg1
   for var in vartuple:
      print var
   return;

# Now you can call printinfo function
printinfo( 10 )
printinfo( 70, 60, 50 )

Output is:
10
Output is:
70
60
50


The Anonymous Functions:
============================

These functions are called anonymous because they are not declared in the standard manner by using the def keyword. 
You can use the lambda keyword to create small anonymous functions.

Lambda forms can take any number of arguments but return just one value in the form of an expression. They cannot contain commands or multiple expressions.
An anonymous function cannot be a direct call to print because lambda requires an expression
Lambda functions have their own local namespace and cannot access variables other than those in their parameter list and those in the global namespace.
Although it appears that lambda's are a one-line version of a function, they are not equivalent to inline statements in C or C++, 
whose purpose is by passing function stack allocation during invocation for performance reasons.

import :
============

# Import module support
import support

# Now you can call defined function that module as follows
support.print_func("Zara")


from...import:
================

Python's from statement lets you import specific attributes from a module into the current namespace. The from...import has the following syntax -

from modname import name1[, name2[, ... nameN]]

eg:
from fib import fibonacci

Locating Modules:
==================

When you import a module, the Python interpreter searches for the module in the following sequences -

The current directory.
If the module isn't found, Python then searches each directory in the shell variable PYTHONPATH.
If all else fails, Python checks the default path. On UNIX, this default path is normally /usr/local/lib/python/.
The module search path is stored in the system module sys as the sys.path variable. 
The sys.path variable contains the current directory, PYTHONPATH, and the installation-dependent default.


I/O:
=====================

raw_input:
-----------
The raw_input([prompt]) function reads one line from standard input and returns it as a string (removing the trailing newline).

str = raw_input("Enter your input: ");
print "Received input is : ", str

input:
--------

The input([prompt]) function is equivalent to raw_input, except that it assumes the input is a valid Python expression and returns the evaluated result to you.

#!/usr/bin/python

str = input("Enter your input: ");
print "Received input is : ", str
This would produce the following result against the entered input -

Enter your input: [x*5 for x in range(2,10,2)]
Recieved input is :  [10, 20, 30, 40]



Opening and Closing Files:
==============================

open :
-------

Before you can read or write a file, you have to open it using Python's built-in open() function. This function creates a file object, which would be utilized to call other support methods associated with it.

Syntax
file object = open(file_name [, access_mode][, buffering])
Here are parameter details:

file_name: The file_name argument is a string value that contains the name of the file that you want to access.

access_mode: The access_mode determines the mode in which the file has to be opened, i.e., read, write, append, etc. 
              A complete list of possible values is given below in the table. This is optional parameter and the default file access mode is read (r).

buffering: If the buffering value is set to 0, no buffering takes place. If the buffering value is 1, line buffering is performed while accessing a file. 
           If you specify the buffering value as an integer greater than 1, then buffering action is performed with the indicated buffer size. 
           If negative, the buffer size is the system default(default behavior).


Once a file is opened and you have one file object, you can get various information related to that file.

file.closed	Returns true if file is closed, false otherwise.
file.mode	Returns access mode with which file was opened.
file.name	Returns name of the file.
file.softspace	Returns false if space explicitly required with print, true otherwise.


# Open a file
fo = open("foo.txt", "wb")
print "Name of the file: ", fo.name
print "Closed or not : ", fo.closed
print "Opening mode : ", fo.mode
print "Softspace flag : ", fo.softspace


This produces the following result -

Name of the file:  foo.txt
Closed or not :  False
Opening mode :  wb
Softspace flag :  0


close:
-----------

fileObject.close();
Example
#!/usr/bin/python

# Open a file
fo = open("foo.txt", "wb")
print "Name of the file: ", fo.name

# Close opend file
fo.close()

write:
-------------

#!/usr/bin/python

# Open a file
fo = open("foo.txt", "wb")
fo.write( "Python is a great language.\nYeah its great!!\n");

# Close opend file
fo.close()

read:
-----------------

# Open a file
fo = open("foo.txt", "r+")
str = fo.read(10);

rename:
-------------

#!/usr/bin/python
import os
# Rename a file from test1.txt to test2.txt
os.rename( "test1.txt", "test2.txt" )
print "Read String is : ", str

remove:
-------------

#!/usr/bin/python
import os
# Delete file test2.txt
os.remove("text2.txt")
# Close opend file

mkdir & chdir:
-----------------

os.mkdir("test")
os.chdir("/home/newdir")
os.getcwd()
os.rmdir( "/tmp/test"  )

try & catch:
=============================

try:
   You do your operations here;
   ......................
except ExceptionI:
   If there is ExceptionI, then execute this block.
except ExceptionII:
   If there is ExceptionII, then execute this block.
   ......................
else:
   If there is no exception then execute this block. 



fo.close()

